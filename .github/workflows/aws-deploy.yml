# DISABLED: Using Render deployment instead
# Your app is successfully deployed at: https://future-cart.onrender.com/
#
# This workflow is disabled because we're using Render for deployment
# which is simpler and doesn't require AWS subscription setup.
#
# Original AWS App Runner deployment workflow (commented out):
#
# name: Deploy to AWS App Runner
#
# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
#
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.9'
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#     - name: Run tests
#       run: |
#         python -m pytest tests/ -v || echo "No tests found, continuing..."
#
#   deploy:
#     needs: test
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     steps:
#     - uses: actions/checkout@v4
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-1
#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2
#     - name: Create ECR repository
#       run: |
#         aws ecr create-repository --repository-name customer-purchase-prediction --region us-east-1 || echo "Repository already exists"
#     - name: Build, tag, and push image to Amazon ECR
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: customer-purchase-prediction
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#     - name: Create App Runner service
#       id: create-service
#       run: |
#         SERVICE_ARN=$(aws apprunner list-services --region us-east-1 --query "ServiceSummaryList[?ServiceName=='customer-purchase-prediction'].ServiceArn" --output text)
#         if [ -z "$SERVICE_ARN" ]; then
#           echo "Creating new App Runner service..."
#           SERVICE_ARN=$(aws apprunner create-service --service-name customer-purchase-prediction --source-configuration '{"AuthenticationConfiguration":{"AccessRoleArn":"'${{ secrets.APPRUNNER_SERVICE_ROLE_ARN }}'"},"ImageRepository":{"ImageIdentifier":"'${{ steps.login-ecr.outputs.registry }}/customer-purchase-prediction:latest'","ImageRepositoryType":"ECR","ImageConfiguration":{"Port":"8000"}}}' --instance-configuration '{"Cpu":"1 vCPU","Memory":"2 GB"}' --region us-east-1 --query 'Service.ServiceArn' --output text)
#         else
#           echo "Service already exists, updating..."
#         fi
#         echo "service_arn=$SERVICE_ARN" >> $GITHUB_OUTPUT
#     - name: Update App Runner service
#       run: |
#         aws apprunner start-deployment --service-arn ${{ steps.create-service.outputs.service_arn }} --region us-east-1
#         aws apprunner wait service-running --service-arn ${{ steps.create-service.outputs.service_arn }} --region us-east-1
#     - name: Get App Runner URL
#       id: get-url
#       run: |
#         SERVICE_URL=$(aws apprunner describe-service --service-arn ${{ steps.create-service.outputs.service_arn }} --region us-east-1 --query 'Service.ServiceUrl' --output text)
#         echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
#         echo "Service URL: $SERVICE_URL"
#     - name: Comment deployment URL
#       uses: actions/github-script@v7
#       with:
#         script: |
#           const url = '${{ steps.get-url.outputs.url }}';
#           const commitSha = '${{ github.sha }}';
#           const comment = `🚀 **Deployment Complete!**\n\n🌐 **Your application is live at:** https://${url}\n\n📚 **API Documentation:** https://${url}/docs\n\n❤️ **Health Check:** https://${url}/health\n\nThis deployment was triggered by commit: \`${commitSha}\`\n\n**Share this URL with others:** https://${url}`;
#           github.rest.issues.createComment({
#             issue_number: context.issue.number,
#             owner: context.repo.owner,
#             repo: context.repo.repo,
#             body: comment
#           });
